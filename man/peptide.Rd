% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/proteins.R
\name{peptide}
\alias{peptide}
\title{R6 Class representing a (single) peptide}
\description{
Contains two character vectors: one representing the amino acid sequence,
 and a second conatining info on the positions of 'variable' modifications.
 The object also contains a modification table specifying the 'fixed' amd
 'variable' modifications.
}
\examples{
testPeptide <- peptide$new(sequence = "SAMPLER",
                           modificationTable = aminoAcidModifications()$table,
                           variableModifications = "0010000")
testPeptide
testPeptide$formula()
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{sequence}}{returns the amino acid sequence as a
character vector, can be set but is not checked against
the length of the modifications string}

\item{\code{length}}{returns the length of the peptide (read
only)}

\item{\code{modifications}}{returns the moficiations string,
can be set but is not checked agains the length of the
sequence string}

\item{\code{modificationsTable}}{returns the mofication table,
can be modified. Note: 'variable' modifications should
match the modifications string}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-peptide-new}{\code{peptide$new()}}
\item \href{#method-peptide-print}{\code{peptide$print()}}
\item \href{#method-peptide-sequence.part}{\code{peptide$sequence.part()}}
\item \href{#method-peptide-modifications.part}{\code{peptide$modifications.part()}}
\item \href{#method-peptide-modifications.formula.part}{\code{peptide$modifications.formula.part()}}
\item \href{#method-peptide-modifications.formula}{\code{peptide$modifications.formula()}}
\item \href{#method-peptide-formula.part}{\code{peptide$formula.part()}}
\item \href{#method-peptide-formula}{\code{peptide$formula()}}
\item \href{#method-peptide-mass.part}{\code{peptide$mass.part()}}
\item \href{#method-peptide-mass}{\code{peptide$mass()}}
\item \href{#method-peptide-mz.part}{\code{peptide$mz.part()}}
\item \href{#method-peptide-mz}{\code{peptide$mz()}}
\item \href{#method-peptide-mzH.part}{\code{peptide$mzH.part()}}
\item \href{#method-peptide-mzH}{\code{peptide$mzH()}}
\item \href{#method-peptide-fragments.part}{\code{peptide$fragments.part()}}
\item \href{#method-peptide-fragments}{\code{peptide$fragments()}}
\item \href{#method-peptide-fragments.part.immoniumIons}{\code{peptide$fragments.part.immoniumIons()}}
\item \href{#method-peptide-fragments.immoniumIons}{\code{peptide$fragments.immoniumIons()}}
\item \href{#method-peptide-clone}{\code{peptide$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-peptide-new"></a>}}
\if{latex}{\out{\hypertarget{method-peptide-new}{}}}
\subsection{Method \code{new()}}{
Create a new peptide object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{peptide$new(sequence = "", modificationTable = NA, variableModifications = NA)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{sequence}}{character vector, the amino acid
sequence of the peptide}

\item{\code{modificationTable}}{the table from a
R6 'modifications' object containing the variable and
fixed modifications present in the amino acid sequence.
Important: do NOT pass on an R6 modifications object,
the function can use a table from such an object, but
not the object itself!}

\item{\code{variableModifications}}{character vector specifying
the position of variable modifications. The length of
this vector must be the same length as the sequence.
Each character specifies the modification at that
position, eg "00010", means that position 1,2,3 & 5 are
unmodified, while position 4 has the third variable
modification in the the modification table. Note that
the numbering follows the original row order of the
modification table (fixed modifications filtered out).
Additions to a modification table should not be a
problem, deletions or editing can cause problems
however as the object currently cannot deal with this
itself. If this character vector is NA, then a
character vector of "0"'s will be created (with the
same length as the sequence)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a new 'peptide' object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-peptide-print"></a>}}
\if{latex}{\out{\hypertarget{method-peptide-print}{}}}
\subsection{Method \code{print()}}{
For printing purposes: prints the sequence string, the
 variable modifications string and the modification
 table
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{peptide$print(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{no arguments, the function takes care of
printing}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-peptide-sequence.part"></a>}}
\if{latex}{\out{\hypertarget{method-peptide-sequence.part}{}}}
\subsection{Method \code{sequence.part()}}{
Retrieve part of the amino acid squence. Note: intended
 for internal use
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{peptide$sequence.part(startSeq = 1L, endSeq = 1L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{startSeq}}{integer vector, specifies the start of
the part of the amino acid sequence to retrieve}

\item{\code{endSeq}}{integer vector, specifies the end of the
part of the amino acid sequence to retrieve}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
character vector
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-peptide-modifications.part"></a>}}
\if{latex}{\out{\hypertarget{method-peptide-modifications.part}{}}}
\subsection{Method \code{modifications.part()}}{
Retrieve part of the variable modification string.
Note: intended for internal use
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{peptide$modifications.part(startSeq = 1L, endSeq = 1L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{startSeq}}{integer vector, specifies the start of
the part of the variable modification string to
retrieve}

\item{\code{endSeq}}{integer vector, specifies the end of the
part of the variable modification string to retrieve}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
character vector
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-peptide-modifications.formula.part"></a>}}
\if{latex}{\out{\hypertarget{method-peptide-modifications.formula.part}{}}}
\subsection{Method \code{modifications.formula.part()}}{
Determines the gain & loss formulas for a part of the
 peptide (waviable modification string and modification
 table are used for this): adds up all the losses and
 gains. If the position of a variable modification in
 the variable modification string does not match the
 amino acid in the modification table, then a warning is
 produced
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{peptide$modifications.formula.part(
  startSeq = 1L,
  endSeq = 1L,
  Nterminal = TRUE,
  Cterminal = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{startSeq}}{integer vector, specifies the start of
the part of the variable modification string to
retrieve}

\item{\code{endSeq}}{integer vector, specifies the end of the
part of the variable modification string to retrieve}

\item{\code{Nterminal}}{logical vector if TRUE then Nterminal
modifications are included (if N-terminus is present in
the part selected by startSeq and endSeq)}

\item{\code{Cterminal}}{logical vector if TRUE then Cterminal
modifications are included (if N-terminus is present in
the part selected by startSeq and endSeq)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a list of 2 formulas: the summed up gain
 formulas & the summed up loss formulas which are
 present in the part selected by startSeq and endSeq)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-peptide-modifications.formula"></a>}}
\if{latex}{\out{\hypertarget{method-peptide-modifications.formula}{}}}
\subsection{Method \code{modifications.formula()}}{
Deterines the gain & loss formulas for the full length
 of the peptide sequence. Essentially a wrapper for
 modifications.formula.part
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{peptide$modifications.formula(Nterminal = TRUE, Cterminal = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{Nterminal}}{logical vector if TRUE then Nterminal
modifications are included (if N-terminus is present in
the part selected by startSeq and endSeq)}

\item{\code{Cterminal}}{logical vector if TRUE then Cterminal
modifications are included (if N-terminus is present in
the part selected by startSeq and endSeq)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a list of 2 formulas: the summed up gain
 formulas & the summed up loss formulas which are
 present in the part selected by startSeq and endSeq)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-peptide-formula.part"></a>}}
\if{latex}{\out{\hypertarget{method-peptide-formula.part}{}}}
\subsection{Method \code{formula.part()}}{
Determines the chemical formula of part of the peptide
with or without the modifications.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{peptide$formula.part(
  startSeq = 1,
  endSeq = 1,
  ignoreModifications = FALSE,
  Nterminal = TRUE,
  Cterminal = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{startSeq}}{integer vector, specifies the start of
the part of the peptide sequence}

\item{\code{endSeq}}{integer vector, specifies the end of the
part of the peptide sequence}

\item{\code{ignoreModifications}}{if FALSE then modifications
(both fixed & variable) are taken into account when
calculating the chemical formula of the peptide. Note:
if TRUE then the 'Nterminal' and 'Cterminal' parameters
are ignored}

\item{\code{Nterminal}}{logical vector if TRUE then Nterminal
modifications are included (if N-terminus is present in
the part selected by startSeq and endSeq)}

\item{\code{Cterminal}}{logical vector if TRUE then Cterminal
modifications are included (if N-terminus is present in
the part selected by startSeq and endSeq)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a named numeric vector, eg: c(C=6, H=12, O=6)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-peptide-formula"></a>}}
\if{latex}{\out{\hypertarget{method-peptide-formula}{}}}
\subsection{Method \code{formula()}}{
Determines the chemical formula of the full length
 peptide with or without modifications. Essentially a
 wrapper around 'formula.part'
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{peptide$formula(
  ignoreModifications = FALSE,
  Nterminal = TRUE,
  Cterminal = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ignoreModifications}}{if FALSE then modifications
(both fixed & variable) are taken into account when
calculating the chemical formula of the peptide. Note:
if TRUE then the 'Nterminal' and 'Cterminal' parameters
are ignored}

\item{\code{Nterminal}}{logical vector if TRUE then Nterminal
modifications are included (if N-terminus is present in
the part selected by startSeq and endSeq)}

\item{\code{Cterminal}}{logical vector if TRUE then Cterminal
modifications are included (if N-terminus is present in
the part selected by startSeq and endSeq)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a named numeric vector, eg: c(C=6, H=12, O=6)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-peptide-mass.part"></a>}}
\if{latex}{\out{\hypertarget{method-peptide-mass.part}{}}}
\subsection{Method \code{mass.part()}}{
Calculate the mass of part of the peptide with or
 without modifications
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{peptide$mass.part(
  startSeq = 1,
  endSeq = 1,
  ignoreModifications = FALSE,
  Nterminal = TRUE,
  Cterminal = TRUE,
  elementsInfo = elementsMonoisotopic()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{startSeq}}{integer vector, specifies the start of
the part of the peptide sequence}

\item{\code{endSeq}}{integer vector, specifies the end of the
part of the peptide sequence}

\item{\code{ignoreModifications}}{if FALSE then modifications
(both fixed & variable) are taken into account when
calculating the chemical formula of the peptide. Note:
if TRUE then the 'Nterminal' and 'Cterminal' parameters
are ignored}

\item{\code{Nterminal}}{logical vector if TRUE then Nterminal
modifications are included (if N-terminus is present in
the part selected by startSeq and endSeq)}

\item{\code{Cterminal}}{logical vector if TRUE then Cterminal
modifications are included (if N-terminus is present in
the part selected by startSeq and endSeq)}

\item{\code{elementsInfo}}{elements masses to be used, needs to
be of class elements, default is elementsMonoisotopic()}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
numeric vector
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-peptide-mass"></a>}}
\if{latex}{\out{\hypertarget{method-peptide-mass}{}}}
\subsection{Method \code{mass()}}{
Calculate the mass of the full length peptide with or
 without modifications
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{peptide$mass(
  ignoreModifications = FALSE,
  Nterminal = TRUE,
  Cterminal = TRUE,
  elementsInfo = elementsMonoisotopic()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ignoreModifications}}{if FALSE then modifications
(both fixed & variable) are taken into account when
calculating the chemical formula of the peptide. Note:
if TRUE then the 'Nterminal' and 'Cterminal' parameters
are ignored}

\item{\code{Nterminal}}{logical vector if TRUE then Nterminal
modifications are included (if N-terminus is present in
the part selected by startSeq and endSeq)}

\item{\code{Cterminal}}{logical vector if TRUE then Cterminal
modifications are included (if N-terminus is present in
the part selected by startSeq and endSeq)}

\item{\code{elementsInfo}}{elements masses to be used, needs to
be of class elements, default is elementsMonoisotopic()}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
numeric vector
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-peptide-mz.part"></a>}}
\if{latex}{\out{\hypertarget{method-peptide-mz.part}{}}}
\subsection{Method \code{mz.part()}}{
Calculate the m/z of part of the peptide (as an ion)
 with or without modifications
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{peptide$mz.part(
  startSeq = 1,
  endSeq = 1,
  ignoreModifications = FALSE,
  Nterminal = TRUE,
  Cterminal = TRUE,
  elementsInfo = elementsMonoisotopic(),
  adducts = 1,
  adductFormula = protonFormula(),
  adductCharge = 1
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{startSeq}}{integer vector, specifies the start of
the part of the peptide sequence}

\item{\code{endSeq}}{integer vector, specifies the end of the
part of the peptide sequence}

\item{\code{ignoreModifications}}{if FALSE then modifications
(both fixed & variable) are taken into account when
calculating the chemical formula of the peptide. Note:
if TRUE then the 'Nterminal' and 'Cterminal' parameters
are ignored}

\item{\code{Nterminal}}{logical vector if TRUE then Nterminal
modifications are included (if N-terminus is present in
the part selected by startSeq and endSeq)}

\item{\code{Cterminal}}{logical vector if TRUE then Cterminal
modifications are included (if N-terminus is present in
the part selected by startSeq and endSeq)}

\item{\code{elementsInfo}}{elements masses to be used, needs to
be of class elements, default is elementsMonoisotopic()}

\item{\code{adducts}}{numeric vector, number of adducts
attached to' or 'removed from' the (originally neutral)
peptide}

\item{\code{adductFormula}}{formula (named numeric vector) of
the adduct}

\item{\code{adductCharge}}{numeric vector indicating the actual
charge per adduct}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
numeric vector
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-peptide-mz"></a>}}
\if{latex}{\out{\hypertarget{method-peptide-mz}{}}}
\subsection{Method \code{mz()}}{
Calculate the m/z of the full length peptide (as an ion)
 with or without modifications
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{peptide$mz(
  ignoreModifications = FALSE,
  Nterminal = TRUE,
  Cterminal = TRUE,
  elementsInfo = elementsMonoisotopic(),
  adducts = 1,
  adductFormula = protonFormula(),
  adductCharge = 1
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ignoreModifications}}{if FALSE then modifications
(both fixed & variable) are taken into account when
calculating the chemical formula of the peptide. Note:
if TRUE then the 'Nterminal' and 'Cterminal' parameters
are ignored}

\item{\code{Nterminal}}{logical vector if TRUE then Nterminal
modifications are included (if N-terminus is present in
the part selected by startSeq and endSeq)}

\item{\code{Cterminal}}{logical vector if TRUE then Cterminal
modifications are included (if N-terminus is present in
the part selected by startSeq and endSeq)}

\item{\code{elementsInfo}}{elements masses to be used, needs to
be of class elements, default is elementsMonoisotopic()}

\item{\code{adducts}}{numeric vector, number of adducts
attached to' or 'removed from' the (originally neutral)
peptide}

\item{\code{adductFormula}}{formula (named numeric vector) of
the adduct}

\item{\code{adductCharge}}{numeric vector indicating the actual
charge per adduct}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
numeric vector
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-peptide-mzH.part"></a>}}
\if{latex}{\out{\hypertarget{method-peptide-mzH.part}{}}}
\subsection{Method \code{mzH.part()}}{
Calculate the m/z of part of the peptide (as a
 protonated ion) with or without modifications
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{peptide$mzH.part(
  startSeq = 1,
  endSeq = 1,
  ignoreModifications = FALSE,
  Nterminal = TRUE,
  Cterminal = TRUE,
  charge = 1,
  elementsInfo = elementsMonoisotopic()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{startSeq}}{integer vector, specifies the start of
the part of the peptide sequence}

\item{\code{endSeq}}{integer vector, specifies the end of the
part of the peptide sequence}

\item{\code{ignoreModifications}}{if FALSE then modifications
(both fixed & variable) are taken into account when
calculating the chemical formula of the peptide. Note:
if TRUE then the 'Nterminal' and 'Cterminal' parameters
are ignored}

\item{\code{Nterminal}}{logical vector if TRUE then Nterminal
modifications are included (if N-terminus is present in
the part selected by startSeq and endSeq)}

\item{\code{Cterminal}}{logical vector if TRUE then Cterminal
modifications are included (if N-terminus is present in
the part selected by startSeq and endSeq)}

\item{\code{charge}}{charge state}

\item{\code{elementsInfo}}{elements masses to be used, needs to
be of class elements, default is elementsMonoisotopic()}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
numeric vector
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-peptide-mzH"></a>}}
\if{latex}{\out{\hypertarget{method-peptide-mzH}{}}}
\subsection{Method \code{mzH()}}{
Calculate the m/z of part of the peptide (as a
 protonated ion) with or without modifications
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{peptide$mzH(
  charge = 1,
  ignoreModifications = FALSE,
  Nterminal = TRUE,
  Cterminal = TRUE,
  elementsInfo = elementsMonoisotopic()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{charge}}{charge state}

\item{\code{ignoreModifications}}{if FALSE then modifications
(both fixed & variable) are taken into account when
calculating the chemical formula of the peptide. Note:
if TRUE then the 'Nterminal' and 'Cterminal' parameters
are ignored}

\item{\code{Nterminal}}{logical vector if TRUE then Nterminal
modifications are included (if N-terminus is present in
the part selected by startSeq and endSeq)}

\item{\code{Cterminal}}{logical vector if TRUE then Cterminal
modifications are included (if N-terminus is present in
the part selected by startSeq and endSeq)}

\item{\code{elementsInfo}}{elements masses to be used, needs to
be of class elements, default is elementsMonoisotopic()}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
numeric vector
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-peptide-fragments.part"></a>}}
\if{latex}{\out{\hypertarget{method-peptide-fragments.part}{}}}
\subsection{Method \code{fragments.part()}}{
generates a table of fragments which could
 arise from fragmenting part of the peptide. The
 ionseries generated are: a, a-H2O, a-NH3, b, b-H2O,
 b-NH3, b+H2O, c, x, y, y-H2O, y-NH3, z. Please note
 that the calculation is relatively 'dumb': it does NOT
 check whether a fragment is possible at all. Prime
 example is the B+H2O ion series: these fragment ions
 can only if certain conditions are met. Currently there
 is no check in this function that checks these
 conditions/assumptions
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{peptide$fragments.part(
  startSeq = 1,
  endSeq = 1,
  ignoreModifications = FALSE,
  onlyIons = TRUE,
  chargeState = 1,
  returnFormulas = FALSE,
  formulaIncludeChargeProtons = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{startSeq}}{integer vector, specifies the start of
the part of the peptide sequence}

\item{\code{endSeq}}{integer vector, specifies the end of the
part of the peptide sequence}

\item{\code{ignoreModifications}}{if FALSE then modifications
(both fixed & variable) are taken into account when
calculating the chemical formula of the peptide}

\item{\code{onlyIons}}{default = TRUE, only information on the
13 (earlier mentioned) ion series is generated. If
FALSE then an additional 10 columns are generated with
info on the ionseries}

\item{\code{chargeState}}{charge state of the ions in the
generated table}

\item{\code{returnFormulas}}{default = FALSE, if TRUE then in
stead of numerical values the table will be populated
by the chemical formulas of the neutral fragments or
charged fragment ions}

\item{\code{formulaIncludeChargeProtons}}{default = FALSE, if
TRUE then protons will be included in the formulas
(ignored when ' returnFormulas = FALSE)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a data.frame with fragment information
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-peptide-fragments"></a>}}
\if{latex}{\out{\hypertarget{method-peptide-fragments}{}}}
\subsection{Method \code{fragments()}}{
generates a table of fragments which could
 arise from fragmenting the full sequence of the
 peptide. The ion series generated are: a, a-H2O, a-NH3,
 b, b-H2O, b-NH3, b+H2O, c, x, y, y-H2O, y-NH3, z.
 Please note that the calculation is relatively 'dumb':
 it does NOT check whether a fragment is possible at
 all. Prime example is the B+H2O ion series: these
 fragment ions can only if certain conditions are met.
 Currently there is no check in this function that
 checks these conditions/assumptions
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{peptide$fragments(
  ignoreModifications = FALSE,
  onlyIons = TRUE,
  chargeState = 1,
  returnFormulas = FALSE,
  formulaIncludeChargeProtons = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ignoreModifications}}{if FALSE then modifications
(both fixed & variable) are taken into account when
calculating the chemical formula of the peptide}

\item{\code{onlyIons}}{default = TRUE, only information on the
13 (earlier mentioned) ion series is generated. If
FALSE then an additional 10 columns are generated with
info on the ionseries}

\item{\code{chargeState}}{charge state of the ions in the
generated table}

\item{\code{returnFormulas}}{default = FALSE, if TRUE then in
stead of numerical values the table will be populated
by the chemical formulas of the neutral fragments or
charged fragment ions}

\item{\code{formulaIncludeChargeProtons}}{default = FALSE, if
TRUE then protons will be included in the formulas
(ignored when ' returnFormulas = FALSE)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a data.frame with fragment information
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-peptide-fragments.part.immoniumIons"></a>}}
\if{latex}{\out{\hypertarget{method-peptide-fragments.part.immoniumIons}{}}}
\subsection{Method \code{fragments.part.immoniumIons()}}{
generates a numeric vector containing
 'expected' immonium ions based on the amino acid
 content of part of the peptide. Please note that this
 function does NOT take into account possible
 (fixed or variable) modifications
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{peptide$fragments.part.immoniumIons(startSeq = 1, endSeq = 1)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{startSeq}}{integer vector, specifies the start of
the part of the peptide sequence}

\item{\code{endSeq}}{integer vector, specifies the end of the
part of the peptide sequence}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
numeric vector
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-peptide-fragments.immoniumIons"></a>}}
\if{latex}{\out{\hypertarget{method-peptide-fragments.immoniumIons}{}}}
\subsection{Method \code{fragments.immoniumIons()}}{
generates a numeric vector containing
 'expected' immonium ions based on the amino acid
 content of the full sequence of the peptide. Please
 note that this function does NOT take into account
 possible (fixed or variable) modifications
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{peptide$fragments.immoniumIons()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
numeric vector
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-peptide-clone"></a>}}
\if{latex}{\out{\hypertarget{method-peptide-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{peptide$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
